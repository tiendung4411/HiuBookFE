import React, { useState, useEffect, useRef } from "react";
import Header from "../components/Header";
import styles from "../styles/SummaryPage.module.css";
import * as pdfjsLib from "pdfjs-dist";
import Lottie from "lottie-react";
import whaleAnimation from "../assets/images/animation/Animation - 1741792766942.json"; // Import Lottie animation
import {
  Chart,
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";
import {
  FaArrowRight,
  FaTimes,
  FaQuestionCircle,
  FaTrash
} from "react-icons/fa";
import Confetti from "react-confetti"; // Th√™m th∆∞ vi·ªán confetti

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho Chart.js
Chart.register(
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

// D·ªØ li·ªáu c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n chi ti·∫øt cho SummaryPage
const guideSteps = [
  {
    step: 1,
    message:
      "Ch√†o b√©! Ch√∫ c√° voi s·∫Ω h∆∞·ªõng d·∫´n t√≥m t·∫Øt s√°ch nha! üê≥ H√£y nh·∫•n 'Ti·∫øp theo' ƒë·ªÉ b·∫Øt ƒë·∫ßu nh√©! üòÑ",
    icon: "üê≥",
    highlight: null // Kh√¥ng highlight b∆∞·ªõc ƒë·∫ßu
  },
  {
    step: 2,
    message:
      "B∆∞·ªõc 1: Ch·ªçn ki·ªÉu t√≥m t·∫Øt! Nh·∫•n 'Tr√≠ch xu·∫•t' ƒë·ªÉ l·∫•y ƒëo·∫°n ch√≠nh, ho·∫∑c 'Di·ªÖn gi·∫£i' ƒë·ªÉ vi·∫øt l·∫°i nha! üåü V√≠ d·ª•: Ch·ªçn 'Tr√≠ch xu·∫•t' ƒë·ªÉ gi·ªØ nguy√™n c√¢u g·ªëc! üòä",
    icon: "üåü",
    highlight: ".methodExtract, .methodParaphrase" // Highlight c√°c n√∫t ch·ªçn ki·ªÉu t√≥m t·∫Øt
  },
  {
    step: 3,
    message:
      "B∆∞·ªõc 2: Ch·ªçn l·ªõp h·ªçc c·ªßa b√©! Nh·∫•n v√†o m·ªôt l·ªõp (L·ªõp 1 ƒë·∫øn L·ªõp 5) ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi nha! üêæ V√≠ d·ª•: Nh·∫•n 'L·ªõp 1' ƒë·ªÉ b·∫Øt ƒë·∫ßu! üê±",
    icon: "üêæ",
    highlight: ".grade1" // Highlight n√∫t L·ªõp 1 l√†m v√≠ d·ª•
  },
  {
    step: 4,
    message:
      "B∆∞·ªõc 3: Nh·∫≠p c√¢u chuy·ªán ho·∫∑c b√†i h·ªçc v√†o √¥ l·ªõn n√†y! V√≠ d·ª•: G√µ 'C√¥ b√© qu√†ng khƒÉn ƒë·ªè ƒëi v√†o r·ª´ng...' r·ªìi nh·∫•n Enter! ‚úçÔ∏è",
    icon: "‚úçÔ∏è",
    highlight: ".textArea" // Highlight √¥ nh·∫≠p vƒÉn b·∫£n
  },
  {
    step: 5,
    message:
      "B∆∞·ªõc 4: Mu·ªën d√πng file PDF? Nh·∫•n 'T·∫£i PDF' v√† ch·ªçn file t·ª´ m√°y t√≠nh nha! üìÑ Ch√∫ c√° voi s·∫Ω ƒë·ªçc gi√∫p b√©! üòä",
    icon: "üìÑ",
    highlight: ".uploadButton" // Highlight n√∫t T·∫£i PDF
  },
  {
    step: 6,
    message:
      "B∆∞·ªõc 5: Nh·∫•n 'T√≥m t·∫Øt n√†o!' ƒë·ªÉ xem k·∫øt qu·∫£ si√™u nhanh! üåà Ch√∫ c√° voi s·∫Ω nh·∫£y l√™n khi b√© nh·∫•n nha! üéâ",
    icon: "üåà",
    highlight: ".submitButton" // Highlight n√∫t T√≥m t·∫Øt
  },
  {
    step: 7,
    message:
      "B∆∞·ªõc 6: Nhi·ªÅu b·∫£n t√≥m t·∫Øt s·∫Ω hi·ªán ra! Ch·ªçn b·∫£n b·∫°n th√≠ch nh·∫•t b·∫±ng c√°ch nh·∫•n 'Ch·ªçn b·∫£n n√†y!' nh√©! üìù V√≠ d·ª•: Ch·ªçn b·∫£n 'Ng·∫Øn' ƒë·ªÉ th·ª≠! üòÑ",
    icon: "üìù",
    highlight: ".summaryOption" // Highlight danh s√°ch b·∫£n t√≥m t·∫Øt
  },
  {
    step: 8,
    message:
      "B∆∞·ªõc 7: Xem l·ªãch s·ª≠ t√≥m t·∫Øt c≈© b·∫±ng c√°ch nh·∫•n 'Xem l·ªãch s·ª≠' nh√©! üïí Ch·ªçn l·∫°i b·∫£n b·∫°n th√≠ch ho·∫∑c x√≥a n·∫øu kh√¥ng c·∫ßn! üòä",
    icon: "üïí",
    highlight: ".historyTab" // Highlight tab l·ªãch s·ª≠
  },
  {
    step: 9,
    message:
      "B∆∞·ªõc 8: Xem bi·ªÉu ƒë·ªì ƒë·ªÉ bi·∫øt t√≥m t·∫Øt c√≥ hay kh√¥ng nha! Nh·∫•n v√†o 'S·ªë t·ª´' ho·∫∑c c√°c bi·ªÉu ƒë·ªì kh√°c ƒë·ªÉ ph√≥ng to! üìä V√≠ d·ª•: Nh·∫•n 'S·ªë t·ª´' ƒë·ªÉ xem! üòÑ",
    icon: "üìä",
    highlight: ".evaluationItem:nth-child(1)" // Highlight bi·ªÉu ƒë·ªì S·ªë t·ª´
  },
  {
    step: 10,
    message:
      "B∆∞·ªõc 9: Mu·ªën t·∫°o h√¨nh ·∫£nh? Nh·∫•n 'T·∫°o v√† c√¥ng khai h√¨nh ·∫£nh' sau khi t√≥m t·∫Øt nha! üé® Ch√∫ c√° voi ch√∫c b√© vui! üê≥",
    icon: "üé®",
    highlight: ".generateImageButton" // Highlight n√∫t t·∫°o h√¨nh ·∫£nh
  },
  {
    step: 11,
    message:
      "Tuy·ªát v·ªùi l·∫Øm! B√© ƒë√£ h·ªçc xong c√°ch t√≥m t·∫Øt r·ªìi! üéâ Nh·∫•n 'Ti·∫øp theo' ƒë·ªÉ k·∫øt th√∫c, ho·∫∑c 'B·ªè qua' ƒë·ªÉ ch∆°i ngay nha! üòÑ",
    icon: "üéâ",
    highlight: null
  }
];

const SummaryPage = () => {
  const [selectedMethod, setSelectedMethod] = useState("extract");
  const [selectedGrade, setSelectedGrade] = useState(1);
  const [textInput, setTextInput] = useState("");
  const [summaryResult, setSummaryResult] = useState("");
  const [summaries, setSummaries] = useState([]); // L∆∞u c√°c b·∫£n t√≥m t·∫Øt hi·ªán t·∫°i
  const [selectedSummary, setSelectedSummary] = useState(""); // B·∫£n t√≥m t·∫Øt ƒë∆∞·ª£c ch·ªçn
  const [historySummaries, setHistorySummaries] = useState([]); // L·ªãch s·ª≠ t√≥m t·∫Øt
  const [showHistory, setShowHistory] = useState(false); // Chuy·ªÉn ƒë·ªïi gi·ªØa hi·ªán t·∫°i v√† l·ªãch s·ª≠
  const [wordCountChart, setWordCountChart] = useState(null);
  const [keywordChart, setKeywordChart] = useState(null);
  const [sentenceLengthChart, setSentenceLengthChart] = useState(null);
  const [rougeChart, setRougeChart] = useState(null);
  const [bleuChart, setBleuChart] = useState(null);
  const [meteorChart, setMeteorChart] = useState(null);
  const [metricsChart, setMetricsChart] = useState(null);
  const [expandedChart, setExpandedChart] = useState(null);
  const [showGuideSteps, setShowGuideSteps] = useState(true);
  const [currentStep, setCurrentStep] = useState(0);
  const [showConfetti, setShowConfetti] = useState(false);

  const wordCountRef = useRef(null);
  const keywordRef = useRef(null);
  const sentenceLengthRef = useRef(null);
  const rougeRef = useRef(null);
  const bleuRef = useRef(null);
  const meteorRef = useRef(null);
  const metricsRef = useRef(null);

  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js";

  const summarizeText = (text) => {
    const words = text.split(" ").filter((word) => word);
    const totalWords = words.length;

    const baseRatio =
      selectedGrade <= 2 ? 0.1 : selectedGrade <= 4 ? 0.15 : 0.2;
    const shortSummaryLength = Math.floor(totalWords * baseRatio);
    const mediumSummaryLength = Math.floor(totalWords * (baseRatio + 0.1));
    const longSummaryLength = Math.floor(totalWords * (baseRatio + 0.2));

    const shortSummary = words.slice(0, shortSummaryLength).join(" ") + "...";
    const mediumSummary = words.slice(0, mediumSummaryLength).join(" ") + "...";
    const longSummary = words.slice(0, longSummaryLength).join(" ") + "...";

    return [
      { type: "Ng·∫Øn", content: shortSummary, wordCount: shortSummaryLength },
      {
        type: "Trung b√¨nh",
        content: mediumSummary,
        wordCount: mediumSummaryLength
      },
      { type: "D√†i", content: longSummary, wordCount: longSummaryLength }
    ];
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (file && file.type === "application/pdf") {
      try {
        const fileReader = new FileReader();
        fileReader.onload = async () => {
          const typedArray = new Uint8Array(fileReader.result);
          const pdf = await pdfjsLib.getDocument(typedArray).promise;
          let fullText = "";
          for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const textContent = await page.getTextContent();
            fullText +=
              textContent.items.map((item) => item.str).join(" ") + " ";
          }
          const summaryList = summarizeText(fullText);
          setSummaries(summaryList);
          setSelectedSummary(summaryList[0].content);
          setSummaryResult(summaryList[0].content);
          // L∆∞u v√†o l·ªãch s·ª≠
          const newHistory = [
            ...historySummaries,
            {
              text: fullText,
              summaries: summaryList,
              timestamp: new Date().toLocaleString()
            }
          ];
          setHistorySummaries(newHistory);
          localStorage.setItem("summaryHistory", JSON.stringify(newHistory));
        };
        fileReader.readAsArrayBuffer(file);
      } catch (error) {
        setSummaries([]);
        setSelectedSummary("√îi! C√≥ l·ªói khi ƒë·ªçc file PDF nha! üòÖ");
        setSummaryResult("√îi! C√≥ l·ªói khi ƒë·ªçc file PDF nha! üòÖ");
        console.error(error);
      }
    } else {
      setSummaries([]);
      setSelectedSummary("√îi! H√£y ch·ªçn file PDF nha! üòÖ");
      setSummaryResult("√îi! H√£y ch·ªçn file PDF nha! üòÖ");
    }
  };

  const handleTextSubmit = () => {
    if (textInput.trim()) {
      const summaryList = summarizeText(textInput);
      setSummaries(summaryList);
      setSelectedSummary(summaryList[0].content);
      setSummaryResult(summaryList[0].content);
      // L∆∞u v√†o l·ªãch s·ª≠
      const newHistory = [
        ...historySummaries,
        {
          text: textInput,
          summaries: summaryList,
          timestamp: new Date().toLocaleString()
        }
      ];
      setHistorySummaries(newHistory);
      localStorage.setItem("summaryHistory", JSON.stringify(newHistory));
    } else {
      setSummaries([]);
      setSelectedSummary("Nh·∫≠p g√¨ ƒë√≥ ƒë·ªÉ t√≥m t·∫Øt nha! üòÑ");
      setSummaryResult("Nh·∫≠p g√¨ ƒë√≥ ƒë·ªÉ t√≥m t·∫Øt nha! üòÑ");
    }
  };

  const handleReset = () => {
    setTextInput("");
    setSummaries([]);
    setSelectedSummary("");
    setSummaryResult("");
  };

  const generateImage = () => {
    if (selectedSummary) {
      if (
        window.confirm(
          "B·∫°n mu·ªën t·∫°o h√¨nh ·∫£nh d·ª±a tr√™n n·ªôi dung t√≥m t·∫Øt v√† c√¥ng khai n√≥?"
        )
      ) {
        alert(
          "H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√¥ng khai! (T√≠nh nƒÉng n√†y c·∫ßn t√≠ch h·ª£p API th·ª±c t·∫ø)"
        );
      }
    } else {
      alert("Vui l√≤ng t√≥m t·∫Øt tr∆∞·ªõc khi t·∫°o h√¨nh ·∫£nh!");
    }
  };

  const handleSelectSummary = (summary) => {
    setSelectedSummary(summary.content);
    setSummaryResult(summary.content);
    setShowConfetti(true);
    alert(`B·∫°n ƒë√£ ch·ªçn b·∫£n t√≥m t·∫Øt ${summary.type}! üéâ`);
    setTimeout(() => setShowConfetti(false), 3000);
  };

  const handleSelectHistorySummary = (summary) => {
    setSelectedSummary(summary.content);
    setSummaryResult(summary.content);
    setShowConfetti(true);
    alert(`B·∫°n ƒë√£ ch·ªçn l·∫°i b·∫£n t√≥m t·∫Øt ${summary.type} t·ª´ l·ªãch s·ª≠! üéâ`);
    setTimeout(() => setShowConfetti(false), 3000);
    setShowHistory(false); // Quay l·∫°i tab hi·ªán t·∫°i sau khi ch·ªçn
  };

  const handleDeleteHistorySummary = (index) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·∫ßn t√≥m t·∫Øt n√†y kh√¥ng?")) {
      const updatedHistory = historySummaries.filter((_, i) => i !== index);
      setHistorySummaries(updatedHistory);
      localStorage.setItem("summaryHistory", JSON.stringify(updatedHistory));
      alert("ƒê√£ x√≥a l·∫ßn t√≥m t·∫Øt n√†y! üóëÔ∏è");
    }
  };

  const handleChartClick = (chartId) => {
    setExpandedChart(expandedChart === chartId ? null : chartId);
  };

  useEffect(() => {
    setShowGuideSteps(true);

    if (selectedSummary) {
      if (wordCountChart) wordCountChart.destroy();
      if (keywordChart) keywordChart.destroy();
      if (sentenceLengthChart) sentenceLengthChart.destroy();
      if (rougeChart) rougeChart.destroy();
      if (bleuChart) bleuChart.destroy();
      if (meteorChart) meteorChart.destroy();
      if (metricsChart) metricsChart.destroy();

      const originalWordCount = textInput
        .split(" ")
        .filter((word) => word).length;
      const summaryWordCount = selectedSummary
        .split(" ")
        .filter((word) => word).length;

      if (wordCountRef && wordCountRef.current) {
        const newWordCountChart = new Chart(wordCountRef.current, {
          type: "bar",
          data: {
            labels: ["VƒÉn b·∫£n g·ªëc", "T√≥m t·∫Øt"],
            datasets: [
              {
                label: "S·ªë t·ª´",
                data: [originalWordCount, summaryWordCount],
                backgroundColor: ["#1e90ff", "#32cd32"],
                borderColor: ["#1e90ff", "#32cd32"],
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: Math.max(originalWordCount, summaryWordCount) + 20,
                title: {
                  display: true,
                  text: "S·ªë t·ª´",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Lo·∫°i vƒÉn b·∫£n",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 20 } }
          }
        });
        setWordCountChart(newWordCountChart);
      }

      if (keywordRef && keywordRef.current) {
        const newKeywordChart = new Chart(keywordRef.current, {
          type: "bar",
          data: {
            labels: ["Truy·ªán", "H·ªçc", "Vui"],
            datasets: [
              {
                label: "T·∫ßn su·∫•t t·ª´ kh√≥a",
                data: [5, 4, 3],
                backgroundColor: "#ffa500",
                borderColor: "#ff8c00",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 10,
                title: {
                  display: true,
                  text: "T·∫ßn su·∫•t",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "T·ª´ kh√≥a",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 20 } }
          }
        });
        setKeywordChart(newKeywordChart);
      }

      if (sentenceLengthRef && sentenceLengthRef.current) {
        const newSentenceLengthChart = new Chart(sentenceLengthRef.current, {
          type: "bar",
          data: {
            labels: ["ƒê·ªô d√†i trung b√¨nh"],
            datasets: [
              {
                label: "S·ªë t·ª´",
                data: [5],
                backgroundColor: "#32cd32",
                borderColor: "#32cd32",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 10,
                title: {
                  display: true,
                  text: "S·ªë t·ª´",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Th√¥ng s·ªë",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 20 } }
          }
        });
        setSentenceLengthChart(newSentenceLengthChart);
      }

      if (rougeRef && rougeRef.current) {
        const newRougeChart = new Chart(rougeRef.current, {
          type: "bar",
          data: {
            labels: ["ROUGE-1", "ROUGE-2", "ROUGE-L"],
            datasets: [
              {
                label: "ƒêi·ªÉm ROUGE",
                data: [0.75, 0.55, 0.7],
                backgroundColor: "#1e90ff",
                borderColor: "#1e90ff",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë ROUGE",
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 12, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 30 } }
          }
        });
        setRougeChart(newRougeChart);
      }

      if (bleuRef && bleuRef.current) {
        const newBleuChart = new Chart(bleuRef.current, {
          type: "bar",
          data: {
            labels: ["Ch·ªâ s·ªë BLEU"],
            datasets: [
              {
                label: "ƒêi·ªÉm BLEU",
                data: [0.65],
                backgroundColor: "#ff69b4",
                borderColor: "#ff69b4",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë BLEU",
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 12, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 30 } }
          }
        });
        setBleuChart(newBleuChart);
      }

      if (meteorRef && meteorRef.current) {
        const newMeteorChart = new Chart(meteorRef.current, {
          type: "bar",
          data: {
            labels: ["METEOR"],
            datasets: [
              {
                label: "ƒêi·ªÉm METEOR",
                data: [0.7],
                backgroundColor: "#1e90ff",
                borderColor: "#1e90ff",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë METEOR",
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 12, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 30 } }
          }
        });
        setMeteorChart(newMeteorChart);
      }

      if (metricsRef && metricsRef.current) {
        const newMetricsChart = new Chart(metricsRef.current, {
          type: "bar",
          data: {
            labels: ["D·ªÖ ƒë·ªçc", "Ch√≠nh x√°c"],
            datasets: [
              {
                label: "Ph·∫ßn trƒÉm",
                data: [80, 90],
                backgroundColor: ["#40e0d0", "#dda0dd"],
                borderColor: ["#40e0d0", "#dda0dd"],
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 100,
                title: {
                  display: true,
                  text: "Ph·∫ßn trƒÉm (%)",
                  font: { size: 16, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë",
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" },
                  padding: 10
                },
                ticks: {
                  font: { size: 12, family: "'Comic Sans MS', sans-serif" },
                  padding: 5,
                  maxRotation: 0,
                  minRotation: 0
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: { size: 14, family: "'Comic Sans MS', sans-serif" }
                }
              },
              tooltip: {
                titleFont: { size: 14, family: "'Comic Sans MS', sans-serif" },
                bodyFont: { size: 14, family: "'Comic Sans MS', sans-serif" }
              }
            },
            layout: { padding: { bottom: 30 } }
          }
        });
        setMetricsChart(newMetricsChart);
      }
    }
  }, [selectedSummary]);

  useEffect(() => {
    // L·∫•y l·ªãch s·ª≠ t·ª´ localStorage khi t·∫£i trang
    const savedHistory = localStorage.getItem("summaryHistory");
    if (savedHistory) {
      setHistorySummaries(JSON.parse(savedHistory));
    }
  }, []);

  const handleShowGuideAgain = () => {
    setShowGuideSteps(true);
    setCurrentStep(0);
  };

  const handleStepInteraction = (e) => {
    const targetClass = e.target.className;
    const currentHighlight = guideSteps[currentStep].highlight;
    if (currentHighlight && currentHighlight.includes(targetClass)) {
      handleNextStep();
    }
  };

  const handleNextStep = () => {
    if (currentStep < guideSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      setShowGuideSteps(false);
    }
  };

  const handleSkipGuide = () => {
    setShowGuideSteps(false);
  };

  return (
    <div className={styles.container} onClick={handleStepInteraction}>
      {showConfetti && <Confetti />}
      <Header />
      <main className={styles.mainContent}>
        {showGuideSteps && (
          <div className={styles.guideStepsContainer}>
            <div className={styles.guideStep}>
              <div className={styles.guideStepContent}>
                <Lottie
                  animationData={whaleAnimation}
                  className={`${styles.guideStepCharacter} ${
                    currentStep === 5 ? styles.jump : ""
                  }`} // Nh·∫£y khi ƒë·∫øn b∆∞·ªõc quan tr·ªçng
                />
                <div className={styles.guideStepMessage}>
                  <span className={styles.guideStepIcon}>
                    {guideSteps[currentStep].icon}
                  </span>
                  <p>{guideSteps[currentStep].message}</p>
                </div>
                {guideSteps[currentStep].highlight && (
                  <div
                    className={styles.highlightPointer}
                    style={{
                      display: currentStep > 1 ? "block" : "none", // ·∫®n ·ªü b∆∞·ªõc 1
                      position: "absolute",
                      top: "50%",
                      left: "50%",
                      transform: "translate(-50%, -50%)",
                      animation: "blink 1s infinite"
                    }}
                  />
                )}
              </div>
              <div className={styles.guideStepButtons}>
                <button className={styles.skipButton} onClick={handleSkipGuide}>
                  B·ªè qua <FaTimes />
                </button>
                <button className={styles.nextButton} onClick={handleNextStep}>
                  Ti·∫øp theo <FaArrowRight />
                </button>
              </div>
            </div>
          </div>
        )}

        <section className={styles.guideSection}>
          <h2 className={styles.guideTitle}>
            H∆∞·ªõng d·∫´n vui cho c√°c b·∫°n nh·ªè! üåà
          </h2>
          <div className={styles.guideContainer}>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üåä</span>
              <p>1. Ch·ªçn ki·ªÉu t√≥m t·∫Øt (Tr√≠ch xu·∫•t ho·∫∑c Di·ªÖn gi·∫£i) nha! üòÑ</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üêæ</span>
              <p>2. Ch·ªçn l·ªõp h·ªçc c·ªßa b·∫°n (L·ªõp 1-5) nh√©! üê±üê∂üê∞üêπüê∏</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>‚úèÔ∏è</span>
              <p>3. G√µ c√¢u chuy·ªán ho·∫∑c b√†i h·ªçc v√†o √¥ l·ªõn! üìù</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üìÑ</span>
              <p>4. Ho·∫∑c nh·∫•n 'T·∫£i PDF' ƒë·ªÉ d√πng file c√≥ s·∫µn! üì•</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üöÄ</span>
              <p>5. Nh·∫•n 'T√≥m t·∫Øt n√†o!' ƒë·ªÉ xem k·∫øt qu·∫£ si√™u vui! üéâ</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üìù</span>
              <p>6. Ch·ªçn b·∫£n t√≥m t·∫Øt ∆∞ng √Ω t·ª´ c√°c l·ª±a ch·ªçn! üåü</p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üïí</span>
              <p>
                7. Xem l·ªãch s·ª≠ t√≥m t·∫Øt c≈© b·∫±ng c√°ch nh·∫•n 'Xem l·ªãch s·ª≠' nh√©! üòä
              </p>
            </div>
            <div className={styles.guideItem}>
              <span className={styles.guideIcon}>üìä</span>
              <p>8. Xem c√°c bi·ªÉu ƒë·ªì ƒë·ªÉ h·ªçc th√™m (cho kh√≥a lu·∫≠n nha)! üéì</p>
            </div>
          </div>
        </section>

        <div className={styles.headerContainer}>
          <div className={styles.optionColumn}>
            <div className={styles.optionSection}>
              <h3 className={styles.optionTitle}>Ch·ªçn ki·ªÉu t√≥m t·∫Øt üåü</h3>
              <div className={styles.optionGroup}>
                <button
                  className={`${styles.optionButton} ${styles.methodExtract} ${
                    selectedMethod === "extract" ? styles.active : ""
                  }`}
                  onClick={() => setSelectedMethod("extract")}
                  data-tooltip="Nh·∫•n ƒë·ªÉ Tr√≠ch xu·∫•t vƒÉn b·∫£n! üåä"
                >
                  <span className={styles.buttonIcon}>üåä</span> Tr√≠ch xu·∫•t
                </button>
                <button
                  className={`${styles.optionButton} ${
                    styles.methodParaphrase
                  } ${selectedMethod === "paraphrase" ? styles.active : ""}`}
                  onClick={() => setSelectedMethod("paraphrase")}
                  data-tooltip="Nh·∫•n ƒë·ªÉ Di·ªÖn gi·∫£i vƒÉn b·∫£n! üå¥"
                >
                  <span className={styles.buttonIcon}>üå¥</span> Di·ªÖn gi·∫£i
                </button>
              </div>
            </div>
            <div className={styles.optionSection}>
              <h3 className={styles.optionTitle}>Ch·ªçn l·ªõp h·ªçc üêæ</h3>
              <div className={styles.optionGroup}>
                <button
                  className={`${styles.optionButton} ${styles.grade1} ${
                    selectedGrade === 1 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(1)}
                  data-tooltip="Ch·ªçn L·ªõp 1 nh√©! üê±"
                >
                  <span className={styles.buttonIcon}>üê±</span> L·ªõp 1
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade2} ${
                    selectedGrade === 2 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(2)}
                  data-tooltip="Ch·ªçn L·ªõp 2 nh√©! üê∂"
                >
                  <span className={styles.buttonIcon}>üê∂</span> L·ªõp 2
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade3} ${
                    selectedGrade === 3 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(3)}
                  data-tooltip="Ch·ªçn L·ªõp 3 nh√©! üê∞"
                >
                  <span className={styles.buttonIcon}>üê∞</span> L·ªõp 3
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade4} ${
                    selectedGrade === 4 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(4)}
                  data-tooltip="Ch·ªçn L·ªõp 4 nh√©! üêπ"
                >
                  <span className={styles.buttonIcon}>üêπ</span> L·ªõp 4
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade5} ${
                    selectedGrade === 5 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(5)}
                  data-tooltip="Ch·ªçn L·ªõp 5 nh√©! üê∏"
                >
                  <span className={styles.buttonIcon}>üê∏</span> L·ªõp 5
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className={styles.inputResultSection}>
          <div className={styles.inputResultContainer}>
            <div className={styles.textInputContainer}>
              <div className={styles.inputWrapper}>
                <div className={styles.textInputArea}>
                  <h3 className={styles.sectionTitle}>
                    Nh·∫≠p vƒÉn b·∫£n mu·ªën t√≥m t·∫Øt nha! üòÑ
                  </h3>
                  <textarea
                    className={styles.textArea}
                    value={textInput}
                    onChange={(e) => setTextInput(e.target.value)}
                    placeholder="Nh·∫≠p vƒÉn b·∫£n mu·ªën t√≥m t·∫Øt nha! üòÑ"
                  />
                </div>
              </div>
              <div className={styles.buttonRow}>
                <button
                  className={styles.submitButton}
                  onClick={() => {
                    handleTextSubmit();
                    generateImage();
                  }}
                  disabled={!textInput.trim()}
                >
                  <span className={styles.buttonIcon}>üåà</span> T√≥m t·∫Øt n√†o!
                </button>
                <label htmlFor="file-upload" className={styles.uploadButton}>
                  <span className={styles.buttonIcon}>üìÑ</span> T·∫£i PDF
                  <input
                    type="file"
                    id="file-upload"
                    className={styles.fileInput}
                    onChange={(e) => {
                      handleFileUpload(e);
                      generateImage();
                    }}
                    accept=".pdf"
                  />
                </label>
                <button className={styles.resetButton} onClick={handleReset}>
                  <span className={styles.buttonIcon}>üßπ</span> X√≥a h·∫øt
                </button>
              </div>
              {selectedSummary && (
                <button
                  className={styles.generateImageButton}
                  onClick={generateImage}
                >
                  T·∫°o v√† c√¥ng khai h√¨nh ·∫£nh
                </button>
              )}
            </div>

            <div className={styles.resultContainer}>
              <div className={styles.tabButtons}>
                <button
                  className={`${styles.tabButton} ${
                    !showHistory ? styles.activeTab : ""
                  }`}
                  onClick={() => setShowHistory(false)}
                >
                  T√≥m t·∫Øt hi·ªán t·∫°i üìù
                </button>
                <button
                  className={`${styles.tabButton} ${
                    showHistory ? styles.activeTab : ""
                  }`}
                  onClick={() => setShowHistory(true)}
                >
                  Xem l·ªãch s·ª≠ üïí
                </button>
              </div>
              {!showHistory ? (
                <>
                  <h3 className={styles.sectionTitle}>
                    K·∫øt qu·∫£ t√≥m t·∫Øt ƒë√¢y nha! üéâ
                  </h3>
                  <div className={styles.resultBox}>
                    <p className={styles.resultText}>
                      {selectedSummary ||
                        "Ch∆∞a c√≥ k·∫øt qu·∫£! T√≥m t·∫Øt ƒë·ªÉ xem nha! üòä"}
                    </p>
                  </div>
                  {summaries.length > 0 && (
                    <div className={styles.summaryOptionsContainer}>
                      <h3 className={styles.sectionTitle}>
                        Ch·ªçn b·∫£n t√≥m t·∫Øt ∆∞ng √Ω nha! üåü
                      </h3>
                      <div className={styles.summaryOptions}>
                        {summaries.map((summary, index) => (
                          <div
                            key={index}
                            className={`${styles.summaryOption} ${
                              selectedSummary === summary.content
                                ? styles.selected
                                : ""
                            }`}
                            onClick={() => handleSelectSummary(summary)}
                          >
                            <p className={styles.summaryOptionTitle}>
                              B·∫£n t√≥m t·∫Øt {summary.type} ({summary.wordCount}{" "}
                              t·ª´) üìú
                            </p>
                            <p className={styles.summaryOptionContent}>
                              {summary.content}
                            </p>
                            <button className={styles.selectSummaryButton}>
                              Ch·ªçn b·∫£n n√†y! ‚úÖ
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <>
                  <h3 className={styles.sectionTitle}>
                    L·ªãch s·ª≠ t√≥m t·∫Øt c·ªßa b√©! üïí
                  </h3>
                  {historySummaries.length > 0 ? (
                    <div className={styles.historyContainer}>
                      {historySummaries.map((history, index) => (
                        <div key={index} className={styles.historyItem}>
                          <div className={styles.historyHeader}>
                            <p className={styles.historyTimestamp}>
                              L·∫ßn t√≥m t·∫Øt {index + 1} ({history.timestamp})
                            </p>
                            <button
                              className={styles.deleteHistoryButton}
                              onClick={() => handleDeleteHistorySummary(index)}
                              title="X√≥a l·∫ßn t√≥m t·∫Øt n√†y"
                            >
                              <FaTrash />
                            </button>
                          </div>
                          <div className={styles.historySummaryOptions}>
                            {history.summaries.map((summary, sIndex) => (
                              <div
                                key={sIndex}
                                className={`${styles.summaryOption} ${
                                  selectedSummary === summary.content
                                    ? styles.selected
                                    : ""
                                }`}
                                onClick={() =>
                                  handleSelectHistorySummary(summary)
                                }
                              >
                                <p className={styles.summaryOptionTitle}>
                                  B·∫£n t√≥m t·∫Øt {summary.type} (
                                  {summary.wordCount} t·ª´) üìú
                                </p>
                                <p className={styles.summaryOptionContent}>
                                  {summary.content}
                                </p>
                                <button className={styles.selectSummaryButton}>
                                  Ch·ªçn l·∫°i! ‚úÖ
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className={styles.resultText}>
                      Ch∆∞a c√≥ l·ªãch s·ª≠ t√≥m t·∫Øt n√†o! üòä
                    </p>
                  )}
                </>
              )}
            </div>
          </div>
        </div>

        <section className={styles.evaluationSection}>
          <h2 className={styles.evaluationTitle}>
            Bi·ªÉu ƒë·ªì ch·ªâ s·ªë ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng t√≥m t·∫Øt üéØ
          </h2>
          <div className={styles.evaluationContainer}>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "wordCount" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("wordCount")}
            >
              <p>S·ªë t·ª´ üìä</p>
              <canvas ref={wordCountRef} id="wordCountChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "keyword" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("keyword")}
            >
              <p>T·ª´ kh√≥a n·ªïi b·∫≠t üîë</p>
              <canvas ref={keywordRef} id="keywordChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "sentenceLength" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("sentenceLength")}
            >
              <p>ƒê·ªô d√†i c√¢u trung b√¨nh üìà</p>
              <canvas ref={sentenceLengthRef} id="sentenceLengthChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "rouge" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("rouge")}
            >
              <p>ƒê·ªì th·ªã ROUGE üìä</p>
              <canvas ref={rougeRef} id="rougeChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "bleu" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("bleu")}
            >
              <p>ƒê·ªì th·ªã BLEU üìâ</p>
              <canvas ref={bleuRef} id="bleuChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "meteor" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("meteor")}
            >
              <p>ƒê·ªì th·ªã METEOR üìâ</p>
              <canvas ref={meteorRef} id="meteorChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "metrics" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("metrics")}
            >
              <p>Ch·ªâ s·ªë b·ªï sung üìã</p>
              <canvas ref={metricsRef} id="metricsChart"></canvas>
            </div>
          </div>
        </section>

        {!showGuideSteps && (
          <button
            className={styles.showGuideButton}
            onClick={handleShowGuideAgain}
            title="Xem l·∫°i h∆∞·ªõng d·∫´n"
          >
            <FaQuestionCircle />
          </button>
        )}
      </main>
    </div>
  );
};

export default SummaryPage;
