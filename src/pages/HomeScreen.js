import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Header from "../components/Header";
import styles from "../styles/HomeScreen.module.css";
import SummaryCarousel from "../components/SummaryCarousel";
import SearchModal from "../components/SearchModal";
import Lottie from "lottie-react";
import ReactHowler from "react-howler";
import whaleAnimation from "../assets/images/animation/Animation - 1741792766942.json";
import musicIcon from "../assets/images/pngtree-cute-little-girl-holding-a-megaphone-hand-drawn-cartoon-character-illustration-png-image_11324956-removebg-preview.png";
import {
  FaSearch,
  FaPen,
  FaBook,
  FaStar,
  FaMoon,
  FaSun,
  FaShareAlt,
  FaArrowRight,
  FaTimes
} from "react-icons/fa";

// Import ·∫£nh minh h·ªça cho t·ª´ng l·ªõp
import class1Mascot from "../assets/images/kids-playing.png";
import class2Mascot from "../assets/images/kids-playing.png";
import class3Mascot from "../assets/images/kids-playing.png";
import class4Mascot from "../assets/images/kids-playing.png";
import class5Mascot from "../assets/images/kids-playing.png";

// Component an to√†n cho ReactHowler
class SafeReactHowler extends React.Component {
  howl = null;

  componentDidMount() {
    if (this.howl && this.props.playing) {
      this.howl.play();
    }
  }

  componentWillUnmount() {
    if (this.howl && this.howl.stop) {
      this.howl.stop();
    }
  }

  render() {
    return (
      <ReactHowler {...this.props} ref={(ref) => (this.howl = ref?.howl)} />
    );
  }
}

// D·ªØ li·ªáu cho M·∫πo ƒë·ªçc s√°ch hay
const readingTips = [
  { id: 1, tip: "ƒê·ªçc 15 ph√∫t m·ªói ng√†y ƒë·ªÉ si√™u th√¥ng minh! üìö‚ú®" },
  { id: 2, tip: "Ghi ch√∫ vui khi ƒë·ªçc truy·ªán nh√©! ‚úçÔ∏èüåü" },
  { id: 3, tip: "ƒê·ªçc to l√™n ƒë·ªÉ nh·ªõ l√¢u h∆°n n√†o! üéôÔ∏èüéâ" }
];

// D·ªØ li·ªáu b√†i ƒë·ªçc m·∫´u
const sampleSummaries = [
  {
    id: 1,
    image:
      "https://www.vocw.edu.vn/wp-content/uploads/2021/01/Ve-tranh-minh-hoa-truyen-co-tich-lop-8.jpg",
    title: "Truy·ªán C·ªï T√≠ch",
    classLevel: 1
  },
  {
    id: 2,
    image:
      "https://cdnphoto.dantri.com.vn/J--UViBTDTpx6QfI4EBgU3A7yJ0=/zoom/1200_630/NxccccccccccccoFBts62NyN5Dzb54/Image/2015/02/sa1-8edd4.jpg",
    title: "B√†i H·ªçc Vui",
    classLevel: 2
  },
  {
    id: 3,
    image: "https://live.staticflickr.com/7874/40474155873_8d0ac5580d_z.jpg",
    title: "Khoa H·ªçc D·ªÖ Hi·ªÉu",
    classLevel: 3
  },
  {
    id: 4,
    image:
      "https://timviec365.vn/pictures/images_03_2021/dinh-tien-hoang%20(1).jpg",
    title: "L·ªãch S·ª≠ Th√∫ V·ªã",
    classLevel: 4
  },
  {
    id: 5,
    image:
      "https://baovannghe.vn/stores/news_dataimages/2024/122024/20/03/truyen-co-tich-tam-cam-1280x76820241220031136.jpg?rt=20241220031138",
    title: "VƒÉn H·ªçc B√©",
    classLevel: 5
  }
];

// D·ªØ li·ªáu l·ªõp h·ªçc
const classLevels = [
  {
    id: 1,
    name: "L·ªõp 1",
    icon: "https://cdn.pixabay.com/photo/2016/04/15/04/19/child-1329499_1280.png",
    accessoryIcon:
      "https://cdn.pixabay.com/photo/2017/08/01/09/06/pencil-2562636_1280.png",
    mascotIcon: class1Mascot
  },
  {
    id: 2,
    name: "L·ªõp 2",
    icon: "https://cdn.pixabay.com/photo/2016/04/15/04/19/child-1329498_1280.png",
    accessoryIcon:
      "https://cdn.pixabay.com/photo/2017/08/01/09/06/book-2562635_1280.png",
    mascotIcon: class2Mascot
  },
  {
    id: 3,
    name: "L·ªõp 3",
    icon: "https://cdn.pixabay.com/photo/2016/04/15/04/19/child-1329497_1280.png",
    accessoryIcon:
      "https://cdn.pixabay.com/photo/2017/08/01/09/06/ruler-2562637_1280.png",
    mascotIcon: class3Mascot
  },
  {
    id: 4,
    name: "L·ªõp 4",
    icon: "https://cdn.pixabay.com/photo/2016/04/15/04/19/child-1329496_1280.png",
    accessoryIcon:
      "https://cdn.pixabay.com/photo/2017/08/01/09/06/eraser-2562638_1280.png",
    mascotIcon: class4Mascot
  },
  {
    id: 5,
    name: "L·ªõp 5",
    icon: "https://cdn.pixabay.com/photo/2016/04/15/04/19/child-1329495_1280.png",
    accessoryIcon:
      "https://cdn.pixabay.com/photo/2017/08/01/09/06/notebook-2562639_1280.png",
    mascotIcon: class5Mascot
  }
];

// Tin nh·∫Øn h∆∞·ªõng d·∫´n
const guideMessages = [
  "B√© ∆°i, bay v√†o th·∫ø gi·ªõi s√°ch th·∫ßn k·ª≥ n√†o! üöÄ",
  "B√© gi·ªèi l·∫Øm, ch·ªçn s√°ch ƒëi n√†o! üòÑ",
  "V√†o ƒë√¢y ch·ªçn s√°ch y√™u th√≠ch nh√©! üê≥",
  "B√© ∆°i, ƒë·ªçc s√°ch vui l·∫Øm, th·ª≠ xem n√†o! üåü",
  "Ch√∫ c√° voi ch·ªù b√© t√≥m t·∫Øt s√°ch n√®! üñãÔ∏è"
];

// D·ªØ li·ªáu c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n
const guideSteps = [
  {
    step: 1,
    message: "Ch√†o b√©! Ch√∫ c√° voi s·∫Ω gi√∫p b√© nh√©! üòä",
    icon: "üê≥"
  },
  {
    step: 2,
    message: "B√© nh·∫•n n√∫t 'Kh√°m ph√° ngay' ƒë·ªÉ t√¨m s√°ch nha! üîç",
    icon: "üîç"
  },
  {
    step: 3,
    message: "Ch·ªçn l·ªõp c·ªßa b√© ·ªü ƒë√¢y n√†y! üêæ",
    icon: "üêæ"
  },
  {
    step: 4,
    message: "Nh·∫•n 'B·∫Øt ƒë·∫ßu t√≥m t·∫Øt n√†o!' ƒë·ªÉ t√≥m t·∫Øt s√°ch nha! ‚úçÔ∏è",
    icon: "‚úçÔ∏è"
  },
  {
    step: 5,
    message: "B√© gi·ªèi l·∫Øm! C√πng ƒë·ªçc s√°ch vui nh√©! üìöüéâ",
    icon: "üìö"
  }
];

function getRandomMessage() {
  return guideMessages[Math.floor(Math.random() * guideMessages.length)];
}

const HomeScreen = () => {
  const navigate = useNavigate();
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);
  const [summary, setSummary] = useState("");
  const [showGuide, setShowGuide] = useState(true);
  const [guideMessage, setGuideMessage] = useState(getRandomMessage());
  const [whalePosition, setWhalePosition] = useState(20);
  const [playSound, setPlaySound] = useState(false);
  const [jump, setJump] = useState(false);
  const [isClicked, setIsClicked] = useState(false);
  const [playMusic, setPlayMusic] = useState(false);
  const [isDarkTheme, setIsDarkTheme] = useState(false);
  const [selectedClass, setSelectedClass] = useState(null);
  const [showGuideSteps, setShowGuideSteps] = useState(true);
  const [currentStep, setCurrentStep] = useState(0);

  // Ki·ªÉm tra xem h∆∞·ªõng d·∫´n ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã ch∆∞a
  useEffect(() => {
    const hasSeenGuide = localStorage.getItem("hasSeenGuide");
    if (hasSeenGuide) {
      setShowGuideSteps(false);
    }
  }, []);

  useEffect(() => {
    const moveWhale = setInterval(() => {
      setWhalePosition((prev) => (prev === 40 ? 80 : 40));
    }, 3000);
    return () => clearInterval(moveWhale);
  }, []);

  const handleSearchClick = () => {
    setIsSearchModalOpen(true);
    setGuideMessage("B√© ∆°i, bay v√†o th·∫ø gi·ªõi s√°ch th·∫ßn k·ª≥ n√†o! üöÄ");
    setShowGuide(true);
  };

  const handleSummarizeClick = () => {
    navigate("/create-summary");
    setGuideMessage("B√© gi·ªèi l·∫Øm! Ch√∫ c√° voi ch·ªù b√© t√≥m t·∫Øt n√®! üê≥");
    setShowGuide(true);
  };

  const handleClassClick = (classId) => {
    const newSelectedClass = selectedClass === classId ? null : classId;
    setSelectedClass(newSelectedClass);
    if (newSelectedClass) {
      navigate(`/reading-list/${classId}`);
      setGuideMessage(
        `B√© ch·ªçn ${
          classLevels.find((level) => level.id === classId).name
        } r·ªìi! Ch√∫ c√° voi khen b√© gi·ªèi! üê≥`
      );
      setShowGuide(true);
    }
  };

  const handleCloseModal = () => setIsSearchModalOpen(false);

  const handleGuideClick = () => {
    setGuideMessage(getRandomMessage());
    setShowGuide(true);
    setPlaySound(true);
    setJump(true);
    setIsClicked(true);
    setTimeout(() => setIsClicked(false), 500);
  };

  const toggleMusic = () => setPlayMusic(!playMusic);

  const toggleTheme = () => setIsDarkTheme(!isDarkTheme);

  const handleShare = () => {
    if (navigator.share) {
      navigator
        .share({
          title: "T√≥m t·∫Øt b√†i ƒë·ªçc cho b√©!",
          text: "C√πng b√© kh√°m ph√° th·∫ø gi·ªõi s√°ch v·ªõi ·ª©ng d·ª•ng t√≥m t·∫Øt si√™u nhanh!",
          url: window.location.href
        })
        .catch((error) => console.log("L·ªói khi chia s·∫ª:", error));
    } else {
      alert("Ch·ª©c nƒÉng chia s·∫ª kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n tr√¨nh duy·ªát n√†y!");
    }
  };

  const handleNextStep = () => {
    if (currentStep < guideSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      setShowGuideSteps(false);
      localStorage.setItem("hasSeenGuide", "true");
    }
  };

  const handleSkipGuide = () => {
    setShowGuideSteps(false);
    localStorage.setItem("hasSeenGuide", "true");
  };

  return (
    <div
      className={`${styles.container} ${isDarkTheme ? styles.darkTheme : ""}`}
    >
      <Header />
      <main className={styles.mainContent}>
        {showGuideSteps && (
          <div className={styles.guideStepsContainer}>
            <div className={styles.guideStep}>
              <div className={styles.guideStepContent}>
                <Lottie
                  animationData={whaleAnimation}
                  className={styles.guideStepCharacter}
                />
                <div className={styles.guideStepMessage}>
                  <span className={styles.guideStepIcon}>
                    {guideSteps[currentStep].icon}
                  </span>
                  <p>{guideSteps[currentStep].message}</p>
                </div>
              </div>
              <div className={styles.guideStepButtons}>
                <button className={styles.skipButton} onClick={handleSkipGuide}>
                  B·ªè qua <FaTimes />
                </button>
                <button className={styles.nextButton} onClick={handleNextStep}>
                  Ti·∫øp theo <FaArrowRight />
                </button>
              </div>
            </div>
          </div>
        )}

        <section className={styles.heroSection}>
          <div className={styles.heroContent}>
            <h2 className={styles.sectionTitle}>
              <FaBook className={styles.sectionIcon} /> T√≥m t·∫Øt b√†i ƒë·ªçc si√™u
              nhanh cho b√©!
            </h2>
            <div className={styles.buttonContainer}>
              <button
                className={`${styles.exploreButton} ${
                  isSearchModalOpen ? styles.active : ""
                }`}
                onClick={handleSearchClick}
              >
                <FaSearch className={styles.buttonIcon} /> Kh√°m ph√° ngay
              </button>
              <button
                className={`${styles.summaryButton}`}
                onClick={handleSummarizeClick}
              >
                <FaPen className={styles.buttonIcon} /> B·∫Øt ƒë·∫ßu t√≥m t·∫Øt n√†o!
              </button>
            </div>
            {summary && <p className={styles.summaryText}>{summary}</p>}
          </div>
          <div className={styles.sparkleEffect}></div>
          <div className={styles.starEffect}>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
          <div className={styles.bubbleEffect}>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        </section>

        {showGuide && !showGuideSteps && (
          <div
            className={styles.guideContainer}
            style={{ right: `${whalePosition}px` }}
            onClick={handleGuideClick}
          >
            <SafeReactHowler
              src="/audio/beoi.mp3"
              playing={playSound}
              onEnd={() => setPlaySound(false)}
              volume={0.7}
            />
            <div className={styles.sparkleEffect}></div>
            <Lottie
              animationData={whaleAnimation}
              className={`${styles.guideCharacter} ${jump ? styles.jump : ""}`}
            />
            <div
              className={`${styles.speechBubble} ${
                isClicked ? styles.clicked : ""
              }`}
            >
              {guideMessage}
            </div>
            <button
              className={styles.closeGuide}
              onClick={() => setShowGuide(false)}
            >
              ‚úï
            </button>
          </div>
        )}

        <h2 className={styles.sectionTitle}>Ch·ªçn l·ªõp c·ªßa b√©</h2>
        <section className={styles.classSection}>
          <div className={styles.classList}>
            <div className={styles.classRow}>
              {classLevels.slice(0, 3).map((level) => (
                <div
                  key={level.id}
                  className={`${styles.classItem} ${
                    styles[`class${level.id}`]
                  } ${selectedClass === level.id ? styles.active : ""}`}
                  onClick={() => handleClassClick(level.id)}
                >
                  <div className={styles.classIconWrapper}>
                    <img
                      src={level.mascotIcon}
                      alt={`${level.name} mascot`}
                      className={styles.classIcon}
                    />
                  </div>
                  <span>{level.name}</span>
                </div>
              ))}
            </div>
            <div className={styles.classRow}>
              {classLevels.slice(3, 5).map((level) => (
                <div
                  key={level.id}
                  className={`${styles.classItem} ${
                    styles[`class${level.id}`]
                  } ${selectedClass === level.id ? styles.active : ""}`}
                  onClick={() => handleClassClick(level.id)}
                >
                  <div className={styles.classIconWrapper}>
                    <img
                      src={level.mascotIcon}
                      alt={`${level.name} mascot`}
                      className={styles.classIcon}
                    />
                  </div>
                  <span>{level.name}</span>
                </div>
              ))}
            </div>
          </div>
        </section>

        <h2 className={styles.sectionTitle}>
          <FaStar className={styles.sectionIcon} /> B√†i ƒë·ªçc n·ªïi b·∫≠t
        </h2>
        <section className={styles.carouselSection}>
          <SummaryCarousel title="" items={sampleSummaries} />
        </section>

        <h2 className={styles.sectionTitle}>
          <FaBook className={styles.sectionIcon} /> M·∫πo ƒë·ªçc s√°ch hay
        </h2>
        <section className={styles.learningSection}>
          <div className={styles.tipList}>
            {readingTips.map((tip) => (
              <div key={tip.id} className={styles.tipItem}>
                <p>
                  <FaStar className={styles.tipIcon} /> {tip.tip}
                </p>
              </div>
            ))}
          </div>
        </section>

        <SearchModal isOpen={isSearchModalOpen} onClose={handleCloseModal} />
      </main>
    </div>
  );
};

export default HomeScreen;
